import { Widget, TabBar, BoxLayout } from "@lumino/widgets";
import { GridWidget } from "./grid";
import "../style/widget.css";
export class SpreadsheetWidget extends Widget {
    constructor({ model }) {
        super();
        this.addClass(SpreadsheetWidget.CSS_CLASS);
        this.model = model;
        this.layout = new BoxLayout({});
        this.grid = new GridWidget({ model });
        this.tabBar = new TabBar({
            allowDeselect: false,
            tabsMovable: false
        });
        this.layout.addWidget(this.grid);
        this.layout.addWidget(this.tabBar);
        BoxLayout.setSizeBasis(this.tabBar, 26);
        BoxLayout.setStretch(this.grid, 1);
        this.tabBar.currentChanged.connect(this.handleSheetChanged, this);
        this._subscription = this.model
            .workbookChanged
            .subscribe(() => this.handleModelContentChanged());
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this.grid.dispose();
        this.tabBar.dispose();
        this._subscription.unsubscribe();
        super.dispose();
    }
    handleSheetChanged(_sender, { currentTitle }) {
        if (currentTitle == null) {
            return;
        }
        this.model.setSheet(currentTitle.label);
    }
    handleModelContentChanged() {
        // Set the sheet names in the tab bar
        this.tabBar.clearTabs();
        const sheetNames = this.model.getSheetNames();
        for (const sheet of sheetNames) {
            this.tabBar.addTab({
                label: sheet,
                owner: void 0
            });
        }
        this.tabBar.currentIndex = sheetNames.indexOf(this.model.activeSheet || "");
    }
}
(function (SpreadsheetWidget) {
    SpreadsheetWidget.CSS_CLASS = "sp-SpreadsheetWidget";
})(SpreadsheetWidget || (SpreadsheetWidget = {}));
